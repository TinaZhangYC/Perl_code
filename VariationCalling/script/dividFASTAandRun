#!/usr/bin/perl -w 

# Author: Yancong Zhang  <zhangyc@mail.bnu.edu.cn>
# divid FASTA file and run cmd parallelly on CMB cluster
# Version 1.0    2013-01-08

=head1 Program Description

Divid WRAPER on CMB cluster

dividFASTAandRun v1.0  [options]

	-d,--piece	<int>		number of subfile
	-p,--ppn	<int>		process number of subjob
	-c,--cmd	<string>	command to submit
	-i,--input	<string>	input sequence file
	-o,--output	<string>	output file
	-h,--help               output help information to screen

=cut

use strict;

use Getopt::Long;
use Pod::Text;
use File::Temp qw/ tempfile tempdir /;
use File::Basename qw(basename dirname);
use Data::Dumper;

use FindBin qw($Bin);
use lib "$Bin/../lib";

use PBS;

my ($piece, $input, $output, $cmd) = (4, "", "", "");
my ($node, $ppn) = (1, 1);
my $HELP;

GetOptions(
        "d|piece:i"=>\$piece,
        "p|ppn:i"=>\$ppn,
        "c|cmd:s"=>\$cmd,
	"i|input:s"=>\$input,
	"o|output:s"=>\$output,
        #"v|verbose!"=>\$VERBOSE,
        "h|help!"=>\$HELP
);
die `pod2text $0` if($HELP || !$input || !$output || !$cmd );

$ENV{'PATH'} = "$Bin:".$ENV{'PATH'};

###### divid input file ######
my @fileArray = &splitSequence($input, $piece);
my @jobArray;

for(my $i=0;$i<$piece;$i++){

	my ($in, $out) = ($fileArray[$i], $fileArray[$i].".out");
	$cmd =~ s/%INPUT%/$in/g;
	$cmd =~ s/%OUTPUT%/$out/g;

	my $job = &submitPBSJob($node, $ppn, "divid$i", $cmd);
	push @jobArray, $job;
}
###### wait job ######
my $mark = @jobArray;
while($mark > 0){
	foreach(@jobArray){
		if(&PBSJobStat($_) <= 0){
			system("cat $_.out >> $output");
			$mark--;
		}
	}
}

exit 0;

##########################################################
sub splitSequence {
	my $filename = shift;
	my $piece = shift;
	open(FILE,$filename) or die;
	my $origin = $/;
	$/ = "\n>";
	my $i = 0;
	my $flag = -1;
	my @farray;
	my ($fh, $tmpName);

	while (<FILE>) {
		chomp;
		my $p = $i % $piece;
		if($p > $flag){
			close($fh) if($i > 0);
			($fh, $tmpName) = tempfile();
			push @farray, $tmpName;
		}
		if(/^(.*?)\n(.*)/s){
			my $name = $1;
			my $seq = $2;
			$name =~ s/\s/_/g;
			$name =~ s/>//;
			$seq =~ s/[\n|>| ]//sg;
			print $fh ">$name\n$seq\n";
			$i++;
	        }
	}
	$/ = $origin;
	close $fh;
	close(FILE);
	return @farray;
}
